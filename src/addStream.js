import { redis } from './redis/redis.js'
import { generateUser } from './user.js'
import { streamKey, maxSize, incrementSize, numberOfStreams } from './config.js';

function convertObjectToFlatArray(obj) {
  return Object.entries(obj).flatMap(([key, value]) => 
    [ key, typeof value === "boolean" || typeof value === "number" ? String(value) : value ] 
  );
}

async function addStream (size) { 
  try {
    console.log(`Inserting ${size} users among ${numberOfStreams} streams...`);
    
    let promises = [];    // Collect promises 
    for (let i = 0; i < size; i += 1) {
      /*
         Node Redis will automatically pipeline requests that are made 
         during the same "tick".
      */
      promises.push(redis.sendCommand([
                        'XADD', 
                        `${streamKey}:${getRandomNumber(numberOfStreams)}`, 
                        'MAXLEN', '~', (Math.floor(maxSize / numberOfStreams)).toString(), 
                        '*', 
                        ...convertObjectToFlatArray(generateUser()) 
                      ]) 
                   ); 
    }    
    await Promise.all(promises); // Resolve all at once
    console.log('Done!')

    // Show insert results
    promises = [];
    for (let i = 1; i <= numberOfStreams; i += 1) { 
      promises.push(redis.xLen(`${streamKey}:${i}`))
    }
    const results = await Promise.all(promises); 
    let j = 0; 
    for (let i = 0; i < results.length; i += 1) {       
      console.log(`Length of '${streamKey}:${i+1}' is ${results[i]}`);
      j = j + results[i]
    }
    console.log(`Total Length is is ${j}`);
  } catch (error) {
    console.error('Error:', error);
  }
};

function getRandomNumber(n) {
  return Math.floor(Math.random() * n) + 1;
}
/*
   main 
*/
const args = process.argv.slice(2);
//console.log(args[0]); 

await redis.connect();
await addStream(args[0] || incrementSize); 
await redis.close();

/*
   Code template generated by copilot. 

   node src/addStream.js 1

   // Not work as expected... 
   for (let i = 0; i < size; i += 1) {
     await redis.xAdd(streamKey, '*', generateUser(), { MAXLENX: 300 } );         
   }    
   console.log(`Done! ${await redis.xLen(streamKey)} users so far...`);    
*/