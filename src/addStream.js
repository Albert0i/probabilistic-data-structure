import { redis } from './redis/redis.js'
import { generateUser } from './user.js'
import { streamKey, incrementSize, maxUsers } from './config.js';

function convertObjectToFlatArray(obj) {
  return Object.entries(obj).flatMap(([key, value]) => 
    [ key, typeof value === "boolean" || typeof value === "number" ? String(value) : value ] 
  );
}

async function addStream (size) {  
  try {
    console.log(`Inserting ${size} users...`);
    
    // Not work as expected... 
    /*        
        for (let i = 0; i < size; i += 1) {
          await redis.xAdd(streamKey, '*', generateUser(), { MAXLENX: 300 } );         
        }    
        console.log(`Done! ${await redis.xLen(streamKey)} users so far...`);    
    */    
    const promises = [];    // Collect promises 
    for (let i = 0; i < size; i += 1) {
      // Node Redis will automatically pipeline requests that are made during the same "tick".      
      promises.push(redis.sendCommand([
                        'XADD', 
                        streamKey, 
                        'MAXLEN', '~', maxUsers.toString(), 
                        '*', 
                        ...convertObjectToFlatArray(generateUser()) 
                      ]) 
                   ); 
    }
    const results = await Promise.all(promises); // Resolve all at once
    console.log(`Done! Success is ${results.length}, ${await redis.xLen(streamKey)} users so far...`);    
  } catch (error) {
    console.error('Error:', error);
  }
};

/*
   main 
*/
const args = process.argv.slice(2);
//console.log(args[0]); 

await redis.connect();
await addStream(args[0] || incrementSize); 
await redis.close();

/*
   Code template generated by copilot. 

   node src/addStream.js 1
*/