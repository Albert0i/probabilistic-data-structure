import { redis } from './redis/redis.js'

const streamKey = 'PDS:demo:users:stream';        // User streams 
const trackingKey = 'PDS:demo:users:lastId';      // last processed id
const trackingCount = 'PDS:demo:users:lastCount'; // last processed count
const cardinalityKey = 'PDS:demo:users:card';     // cardinality
const top100Key = 'PDS:demo:users:freq'           // top 100   
const batchSize = 1000;   // Batch size 
const expireTime = 5000;  // Block for 5 seconds

async function getLastProcessedId() {
  return await redis.get(trackingKey) || '0'; // Start from the beginning if no tracking exists
}
async function getProcessedCount() {
    return await redis.get(trackingCount) || 0; // Start from the beginning if no tracking exists
}

async function processMessage(message) {
    // processing...
    //console.log(message)    
    await redis.multi().
                    pfAdd(cardinalityKey, message.message.fullname).
                    set(trackingKey, message.id).
                    incr(trackingCount).
                exec();
    await redis.sendCommand(["TOPK.ADD", top100Key, message.message.fullname])    
}
async function readStream() {
  await redis.connect();

  let lastId = await getLastProcessedId();
  const lastProcessed = await getProcessedCount();

  if (lastId === '0') 
    console.log(`Starting from ID: ${lastId}`);
  else 
    console.log(`Resuming from ID: ${lastId}, processed is: ${lastProcessed}`);

  // TOPK.RESERVE mytopk 100 1000 10 0.999
  await redis.sendCommand(['TOPK.RESERVE', 'PDS:demo:users:freq', '100', '1000', '10', '0.999']);
  while (true) {
    try {
      const results = await redis.xRead(
        { key: streamKey, id: lastId },
        { COUNT: batchSize, BLOCK: expireTime }
      );

      if (!results) { 
        console.log('Time out! Bye bye...');
        break; 
      }

      process.stdout.write('.');
      results[0].messages.forEach(message => {
        processMessage(message)
        lastId = message.id 
      })
    } catch (error) {
      console.error('Error processing stream:', error);
      break;
    }
  }

  const card = await redis.pfCount(cardinalityKey)
  const topkResult = await redis.sendCommand(["TOPK.LIST", top100Key, 'WITHCOUNT'])

  console.log('cardinality =', card)
  console.log('topkResult =', topkResult)

  await redis.quit();
}

await readStream();
/*
   Code template generated by copilot. 
*/