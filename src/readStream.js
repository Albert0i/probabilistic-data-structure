import { redis } from './redis/redis.js'
import { streamKey, batchSize, blockForTime, cardinalityKey, topKKey } from './config.js'

const trackingKey = 'PDS:demo:users:lastId';      // last processed id
const trackingCount = 'PDS:demo:users:lastCount'; // last processed count

async function processMessage(message) {
    // processing...
    //console.log(message) 
    await redis.multi().
                    pfAdd(cardinalityKey, message.message.fullname).
                    set(trackingKey, message.id).
                    incr(trackingCount).
                exec();
    await redis.sendCommand(["TOPK.ADD", topKKey, message.message.fullname])    
}

async function readStream(option) {
  let lastId = '0'; 
  let lastProcessed = 0; 

  if (option === 'anew') {
    await Promise.all([
      redis.del(cardinalityKey), 
      redis.del(topKKey),
      redis.del(trackingCount)
    ]);
    await redis.sendCommand(['TOPK.RESERVE', topKKey, '100', '10000', '30', '0.999999']);
  }
  else {
    [lastId, lastProcessed] = await Promise.all([
      redis.get(trackingKey), 
      redis.get(trackingCount),
      redis.exists(topKKey)
    ]);
  }

  if (lastId === '0') 
    console.log(`Starting from ID: ${lastId}`);
  else 
    console.log(`Resuming from ID: ${lastId}, processed is: ${lastProcessed}`);

  // TOPK.RESERVE PDS:demo:users:freq 100 1000 10 0.999
  // TOPK.RESERVE PDS:demo:users:freq 100 2000 15 0.9999
  // TOPK.RESERVE PDS:demo:users:freq 100 5000 20 0.99999
  // TOPK.RESERVE PDS:demo:users:freq 100 10000 30 0.999999
  //await redis.sendCommand(['TOPK.RESERVE', 'PDS:demo:users:freq', '100', '10000', '30', '0.999999']);
  while (true) {
    try {
      const results = await redis.xRead(
        { key: streamKey, id: lastId },
        { COUNT: batchSize, BLOCK: blockForTime }
      );

      if (!results) { 
        console.log('Time out! Bye bye...');
        break; 
      }

      process.stdout.write('.');
      results[0].messages.forEach(message => {
        processMessage(message)
        lastId = message.id 
      })
    } catch (error) {
      console.error('Error processing stream:', error);
      break;
    }
  }

  const [card, topkResult] = await Promise.all([
      redis.pfCount(cardinalityKey), 
      await redis.sendCommand(["TOPK.LIST", topKKey, 'WITHCOUNT'])
    ]);

    console.log('cardinality =', card, ', topkResult =', topkResult)
}

/*
   main 
*/
const args = process.argv.slice(2);
//console.log(args[0]); 

await redis.connect();
await readStream(args[0]);
await redis.close();

/*
   Code template generated by copilot. 

   node src/readStream.js anew 
*/